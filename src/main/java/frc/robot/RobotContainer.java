// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.devices.SteeringMotor;
import frc.robot.devices.DrivingMotor;
import frc.robot.devices.SwerveAssembly;
import frc.robot.devices.NavX;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.InstantCommand;

import java.util.ArrayList;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
  //private Motor1 theOneAndOnlyMotor1;
  //private Motor2 theOneAndOnlyMotor2;
  //private SwerveAssembly frontLeft;
  //private SwerveAssembly frontRight;
  //private SwerveAssembly rearLeft;
  //private SwerveAssembly rearRight;
  private DriveController m_DriveController;
  private DriveSubsystem m_DriveSubsystem;
  //private DrivePhysics m_DrivePhysics;
  //private UpdateSwerveStateCommand m_updateSwerveCommand;
  private DriveCommand m_DriveCommand;
  //private ArrayList<SwerveAssembly> swerves;
  private NavX navx;
  private NavSubsystem m_navSubsystem;
  private NavCommand m_navCommand;

// Joysticks

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // Setup the navigation sensor
        navx = new NavX();
        m_navSubsystem = new NavSubsystem(navx);
        m_navCommand = new NavCommand(m_navSubsystem);
        m_navSubsystem.setDefaultCommand(m_navCommand);

        // Define the 4 Swerve Assemblies
        //frontLeft = new SwerveAssembly("Front Left", 2, 3, false, Constants.WHEEL_OFFSET_X, Constants.WHEEL_OFFSET_Y, Constants.FRONT_LEFT_CHASSIS_ANGULAR_OFFSET);
        //frontRight = new SwerveAssembly("Front Right", 4, 5, false, Constants.WHEEL_OFFSET_X, -Constants.WHEEL_OFFSET_Y, Constants.FRONT_RIGHT_CHASSIS_ANGULAR_OFFSET);
        //rearLeft = new SwerveAssembly("Rear Left", 8, 9, false, -Constants.WHEEL_OFFSET_X, Constants.WHEEL_OFFSET_Y,Constants.BACK_LEFT_CHASSIS_ANGULAR_OFFSET);
        //rearRight = new SwerveAssembly("Rear Right", 6, 7, false, -Constants.WHEEL_OFFSET_X, -Constants.WHEEL_OFFSET_Y, Constants.BACK_RIGHT_CHASSIS_ANGULAR_OFFSET);
        //swerves = new ArrayList<SwerveAssembly>();
        //swerves.add(frontLeft);
        //swerves.add(frontRight);
        //swerves.add(rearLeft);
        //swerves.add(rearRight);

        m_DriveSubsystem = new DriveSubsystem(m_navSubsystem);
        m_DriveSubsystem.initialize();

        // Add the Swerve Assemblies to the DrivePhysics Subsystem and set the default (UpdateSwerveState) command
        //m_DrivePhysics = new DrivePhysics(frontLeft, frontRight, rearLeft, rearRight);
        //m_updateSwerveCommand = new UpdateSwerveStateCommand(m_DriveSubsystem.getDrivePhysics());
        //m_DrivePhysics.setDefaultCommand(m_updateSwerveCommand);

        m_DriveController = new DriveController();
        //m_DriveSubsystem = new DriveSubsystem(m_DrivePhysics, frontLeft, frontRight, rearLeft, rearRight);

        m_DriveCommand = new DriveCommand(m_DriveController, m_DriveSubsystem);
        m_DriveController.setDefaultCommand(m_DriveCommand);
        
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return null;
  }

  public Boolean initializeDriveSubsystem() {
    return true;
    //return m_DriveSubsystem.initialize();
  }
  
}

